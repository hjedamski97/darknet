import os
import cv2
from os.path import join
from os.path import exists
from pathlib import Path
from PIL import Image
import re
import shutil
import statistics


def sort_list(num_list):
    res = sorted(num_list, key=lambda k: k['index'].get('num', 0), reverse=True)
    print("Sortierte Liste: ", res)
    return res

def images_elektronik(file):
    k = 0
    elektronik_img = 0
    fn, fext = os.path.splitext(file)
    if (fext==".txt"):
        with open(os.path.join(src, file), 'r') as file:
            #print("File: ", file)
            for row in file:
                print("row: ", row)
                print("")
                #Background-Klasse -> leere Datei
                if (row != "") and (row[k] != '\n'):
                    cat, x, y, w, h = row.split(" ")
                    if cat == "0":
                        elektronik_img  = elektronik_img + 1
                        break
                else:
                    print("Background-Class")
                    break
        return elektronik_img

def images_glas(file):
    k = 0
    glas_img = 0
    fn, fext = os.path.splitext(file)
    if (fext==".txt"):
        with open(os.path.join(src, file), 'r') as file:
            #print("File: ", file)
            for row in file:
                print("row: ", row)
                print("")
                #Background-Klasse -> leere Datei
                if (row != "") and (row[k] != '\n'):
                    cat, x, y, w, h = row.split(" ")
                    if cat == "1":
                        glas_img  = glas_img + 1
                        break
                else:
                    print("Background-Class")
                    break
        return glas_img

def images_holz(file):
    k = 0
    holz_img = 0
    fn, fext = os.path.splitext(file)
    if (fext==".txt"):
        with open(os.path.join(src, file), 'r') as file:
            #print("File: ", file)
            for row in file:
                print("row: ", row)
                print("")
                #Background-Klasse -> leere Datei
                if (row != "") and (row[k] != '\n'):
                    cat, x, y, w, h = row.split(" ")
                    if cat == "2":
                        holz_img  = holz_img + 1
                        break
                else:
                    print("Background-Class")
                    break
        return holz_img

def images_moebel(file):
    k = 0
    moebel_img = 0
    fn, fext = os.path.splitext(file)
    if (fext==".txt"):
        with open(os.path.join(src, file), 'r') as file:
            #print("File: ", file)
            for row in file:
                print("row: ", row)
                print("")
                #Background-Klasse -> leere Datei
                if (row != "") and (row[k] != '\n'):
                    cat, x, y, w, h = row.split(" ")
                    if cat == "3":
                        moebel_img  = moebel_img + 1
                        break
                else:
                    print("Background-Class")
                    break
        return moebel_img

def images_pappe(file):
    k = 0
    pappe_img = 0
    fn, fext = os.path.splitext(file)
    if (fext==".txt"):
        with open(os.path.join(src, file), 'r') as file:
            #print("File: ", file)
            for row in file:
                print("row: ", row)
                print("")
                #Background-Klasse -> leere Datei
                if (row != "") and (row[k] != '\n'):
                    cat, x, y, w, h = row.split(" ")
                    if cat == "4":
                        pappe_img  = pappe_img + 1
                        break
                else:
                    print("Background-Class")
                    break
        return pappe_img

def images_plastik(file):
    k = 0
    plastik_img = 0
    fn, fext = os.path.splitext(file)
    if (fext==".txt"):
        with open(os.path.join(src, file), 'r') as file:
            #print("File: ", file)
            for row in file:
                print("row: ", row)
                print("")
                #Background-Klasse -> leere Datei
                if (row != "") and (row[k] != '\n'):
                    cat, x, y, w, h = row.split(" ")
                    if cat == "5":
                        plastik_img  = plastik_img + 1
                        break
                else:
                    print("Background-Class")
                    break
        return plastik_img

def images_sanitaer(file):
    k = 0
    sanitaer_img = 0
    fn, fext = os.path.splitext(file)
    if (fext==".txt"):
        with open(os.path.join(src, file), 'r') as file:
            #print("File: ", file)
            for row in file:
                print("row: ", row)
                print("")
                #Background-Klasse -> leere Datei
                if (row != "") and (row[k] != '\n'):
                    cat, x, y, w, h = row.split(" ")
                    if cat == "6":
                        sanitaer_img  = sanitaer_img + 1
                        break
                else:
                    print("Background-Class")
                    break
        return sanitaer_img


def images_sonderabfaelle(file):
    k = 0
    sonderabfaelle_img = 0
    fn, fext = os.path.splitext(file)
    if (fext==".txt"):
        with open(os.path.join(src, file), 'r') as file:
            #print("File: ", file)
            for row in file:
                print("row: ", row)
                print("")
                #Background-Klasse -> leere Datei
                if (row != "") and (row[k] != '\n'):
                    cat, x, y, w, h = row.split(" ")
                    if cat == "7":
                        sonderabfaelle_img  = sonderabfaelle_img + 1
                        break
                else:
                    print("Background-Class")
                    break
        return sonderabfaelle_img


def images_stoffe(file):
    k = 0
    stoffe_img = 0
    fn, fext = os.path.splitext(file)
    if (fext==".txt"):
        with open(os.path.join(src, file), 'r') as file:
            #print("File: ", file)
            for row in file:
                print("row: ", row)
                print("")
                #Background-Klasse -> leere Datei
                if (row != "") and (row[k] != '\n'):
                    cat, x, y, w, h = row.split(" ")
                    if cat == "8":
                        stoffe_img  = stoffe_img + 1
                        break
                else:
                    print("Background-Class")
                    break
        return stoffe_img


def count_annotations(file):
    k = 0
    c_elektronik = 0
    c_glas = 0
    c_holz = 0
    c_moebel = 0
    c_pappe = 0
    c_plastik = 0
    c_sanitaer = 0
    c_sonderabfaelle = 0
    c_stoffe = 0
    c_background = 0
    fn, fext = os.path.splitext(file)
    if (fext==".txt"):
        with open(os.path.join(src, file), 'r') as file:
            #print("File: ", file)
            for row in file:
                print("row: ", row)
                print("")
                #Background-Klasse -> leere Datei
                if (row != "") and (row[k] != '\n'):
                    cat, x, y, w, h = row.split(" ")
                    if cat == "0":
                        c_elektronik  = c_elektronik + 1
                    if cat == "1":
                        c_glas  = c_glas + 1
                    if cat == "2":
                        c_holz  = c_holz + 1
                    if cat == "3":
                        c_moebel  = c_moebel + 1
                    if cat == "4":
                        c_pappe  = c_pappe + 1
                    if cat == "5":
                        c_plastik  = c_plastik + 1
                    if cat == "6":
                        c_sanitaer  = c_sanitaer + 1
                    if cat == "7":
                        c_sonderabfaelle  = c_sonderabfaelle + 1
                    if cat == "8":
                        c_stoffe  = c_stoffe + 1
                else:
                    print("Background-Class")
                    c_background = c_background + 1
    return c_elektronik, c_glas, c_holz, c_moebel, c_pappe, c_plastik, c_sanitaer, c_sonderabfaelle, c_stoffe, c_background

def check_category(file, prio_idx):
    k = 0
    fn, fext = os.path.splitext(file)
    b_res = False
    if (fext==".txt"):
        with open(os.path.join(src, file), 'r') as file:
            #print("File: ", file)
            for row in file:
                print("row: ", row)
                print("")
                #Background-Klasse -> leere Datei
                if (row != "") and (row[k] != '\n'):
                    cat, x, y, w, h = row.split(" ")
                    if (cat == prio_idx):
                        b_res = True
    return b_res

def readFile(f, src, txt_path_old, img_path_old, dest, invalid):
    print("txt_path_old: ", txt_path_old)
    print("img_path_old: ", img_path_old)
    print("dest: ", dest)
    print("invalid: ", invalid)
    file = f
    k = 0
    res_list = []
    str_list = []
    str_counter = 0
    fn, fext = os.path.splitext(file)
    if (fext==".txt"):
        with open(os.path.join(src, file), 'r') as file:
            #print("File: ", file)
            for row in file:
                print("row: ", row)
                print("")
                #Background-Klasse -> leere Datei
                if (row != "") and (row[k] != '\n'):
                    cat, x, y, w, h = row.split(" ")
                    #h = h.rstrip("\n")
                    if (float(x) >= 0 and float(x) <= 1) and (float(y) >= 0 and float(y) <= 1) and (float(w) >= 0 and float(w) <= 1) and (float(h) >= 0 and float(h) <= 1):
                        if cat == "waste":
                            line = str(1) + " " + str(x) + " " + str(y) + " " + str(w) + " " + str(h)
                            str_list.append(line)
                            print("str_list: ", str_list)
                            res_list.append(str_list)
                        else:
                            print("Annotation correct")
                    else:
                        print("Invalid YOLO-Format! Move to invalid_yolo_format")
                        shutil.move(txt_path_old, invalid)
                else:
                    print("Background Label")
                    print()
                    with open(dest, 'w') as file:
                        file.writelines("")
                        file.close()
                        return res_list
                str_list = []
            print("res: ", res_list)
            with open(dest, 'w') as file:
                for row in res_list:
                    file.writelines(row)
            file.close()
            print("")
            return res_list

def main(cat_dir, src, dest, alone, invalid, trash):
    src = src
    #dest = dest
    print("src: ", src)
    #print("dest: ", dest)
    #convert_to_jpeg(src)
    #print("Rename file & convert it to .jpeg ...")
    for file in os.listdir(src):
        print(file)
        print("")
        fn, fext = os.path.splitext(file)
        if fext == ".txt":
            check_path_jpeg = Path(os.path.join(src, fn + ".jpeg"))
            check_path_jpg = Path(os.path.join(src, fn + ".jpg"))
            txt_path_old = os.path.join(src, fn + ".txt")
            txt_path_dest = os.path.join(dest, fn + ".txt")

            if check_path_jpeg.is_file():
                print("We have a match !")
                img_path_old = check_path_jpeg
                img_path_dest = os.path.join(dest, fn + ".jpeg")
                bbx_list = readFile(file, src, txt_path_old, img_path_old, txt_path_dest, invalid)
                if bbx_list == []:
                    print("NO WASTE")
                    print("Bbx-Liste: ", bbx_list)

            elif check_path_jpg.is_file():
                print("We have a match !")
                img_path_old = check_path_jpg
                img_path_dest = os.path.join(dest, fn + ".jpg")
                bbx_list = readFile(file, src, txt_path_old, img_path_old, txt_path_dest, invalid)
